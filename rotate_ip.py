import time
import random
import requests
from stem import Signal
from stem.control import Controller

def rotate_ip():
    """Signal Tor to switch to a new circuit (rotate IP)."""
    try:
        # Connect to the Tor control port using cookie authentication
        # Assumes the cookie is in the default location relative to DataDirectory
        with Controller.from_port(port=9051) as controller:
            # Authenticate using the cookie generated by Tor
            # (requires the script user to have read access to ~/.tor/control_auth_cookie)
            controller.authenticate()
            controller.signal(Signal.NEWNYM)
            print("[*] IP rotation successful")
    except Exception as e:
        print(f"[!] Error rotating IP: {e}")
        # If authentication fails or Tor is not running, this will fail.
        # Ensure Tor is running and the script has necessary permissions.
        # Consider adding more specific exception handling for stem errors

def get_current_ip():
    proxies = {
        'http': 'socks5h://127.0.0.1:9050',
        'https': 'socks5h://127.0.0.1:9050'
    }
    try:
        # Add some common headers to look less like a bot
        headers = {
            'User-Agent': random.choice([
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15",
                "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/108.0"
            ]),
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,açå*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Cache-Control': 'max-age=0'
        }
        # Use a service that simply returns the IP
        ip = requests.get('https://api.ipify.org', proxies=proxies, headers=headers, timeout=15).text
        print(f"[*] New IP: {ip}")
    except requests.exceptions.RequestException as e:
        print(f"[!] Failed to get current IP via proxy: {e}")
    except Exception as e:
        print(f"[!] Unexpected error getting IP: {e}")

def main():
    """Main loop to periodically rotate the IP."""
    print("[*] Starting IP rotation service")
    rotation_interval = 5 # seconds, configure here
    print(f"[*] Rotating IP every {rotation_interval} seconds...")

    # Initial IP check before the first rotation cycle starts
    print("[*] Checking initial IP...")
    get_current_ip()


    while True:
        try:
            # Wait for the specified interval before the next rotation
            print(f"[*] Waiting {rotation_interval} seconds for next rotation...")
            time.sleep(rotation_interval)

            rotate_ip()
            # Add a small delay after rotation before checking IP,
            # allowing Tor to establish the new circuit
            time.sleep(2) # Give Tor a moment to establish a new circuit
            get_current_ip()

        except KeyboardInterrupt:
            print("\n[*] Stopping IP rotation service requested by user.")
            break # Exit the loop on Ctrl+C
        except Exception as e:
            print(f"[!] Unexpected error in main loop: {e}")
            # Wait longer before retrying in case of unexpected errors
            time.sleep(10)

if __name__ == "__main__":
    # Give Tor a moment to start and create the cookie file if just started
    # This delay might need adjustment based on your system speed and Tor's startup time
    print("[*] Waiting for Tor to start...")
    time.sleep(5) # Wait a bit longer initially for Tor and cookie file

    # Verify cookie file exists before attempting connection
    import os
    cookie_path = os.path.expanduser("~/.tor/control_auth_cookie")
    if not os.path.exists(cookie_path):
         print(f"[!] Authentication cookie not found at {cookie_path}. Ensure Tor is running with CookieAuthentication 1 and DataDirectory set.")
         print("[!] Aborting script.")
    else:
        print(f"[*] Found cookie file: {cookie_path}")
        main()
